[build-system]
requires = ["setuptools>=45", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "metasyn"
authors = [
    { name = "Raoul Schram", email = "r.d.schram@uu.nl" },
    { name = "Erik-Jan van Kesteren", email = "e.vankesteren1@uu.nl" },
]
description = "Package for creating synthetic datasets while preserving privacy."
readme = "README.md"
requires-python = ">=3.8"
keywords = ["metadata", "open-data", "privacy", "synthetic-data", "tabular datasets"]
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
]

dependencies = [
    "polars>=0.20.13",
    "tqdm",
    "numpy>=1.20",
    "pyarrow", # Dependency of polars since we're converting from pandas.
    "scipy",
    "numpy>=1.20",
    "faker",
    "lingua-language-detector",
    "regex",
    "jsonschema",
    "importlib-metadata;python_version<'3.10'",
    "importlib-resources;python_version<'3.9'",
    "tomli;python_version<'3.11'",
    "regexmodel>=0.2.1"
]

dynamic = ["version"]

[project.urls]
GitHub = "https://github.com/sodascience/metasyn"
documentation = "https://metasyn.readthedocs.io/en/latest/index.html"

[project.optional-dependencies]
test = [
    "ruff", "pytest", "pylint", "pydocstyle", "mypy", "flake8", "nbval",
    "sphinx", "sphinx-rtd-theme", "sphinxcontrib-napoleon",
    "sphinx-autodoc-typehints", "sphinx_inline_tabs", "sphinx_copybutton",
    "XlsxWriter", "types-tqdm", "types-regex", "pandas"
]

[project.scripts]
metasyn = "metasyn.__main__:main"

[project.entry-points."metasyn.distribution_provider"]
builtin = "metasyn.provider:BuiltinDistributionProvider"

[project.entry-points."metasyn.privacy"]
none = "metasyn.privacy:BasicPrivacy"

[tool.setuptools]
packages = ["metasyn"]
obsoletes = ["metasynth"]

[tool.setuptools_scm]
write_to = "metasyn/_version.py"

[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "pandas.*",
    "jsonschema.*",
    "sklearn.*",
    "importlib_metadata.*",
    "importlib_resources.*",
    "wget.*",
    "lingua.*",
    "tomllib.*",
]
ignore_missing_imports = true

[tool.pylint.'MASTER']
ignore-patterns="_version.py"
ignore-paths = "^metasyn/distribution/legacy.*$"

[tool.pylint.'FORMAT']
max-line-length=100
max-locals=35
max-args=10

[tool.pylint.'BASIC']
good-names=["a", "b", "mu"]

[tool.ruff]
exclude = ["_version.py", "metasyn/distribution/legacy.*"]
line-length = 100
lint.select = ["E", "F", "W", "I", "N"]

[tool.ruff.lint.pep8-naming]
ignore-names = ["a", "b", "mu"]

[tool.tox]
legacy_tox_ini = """
    [tox]
    env_list =
        py311
        ruff
        pylint
        pydocstyle
        mypy
        sphinx
        pytest
        nbval
    minversion = 4.11.3

    [testenv]
    description = run the tests with pytest
    package = wheel
    wheel_build_env = .pkg
    deps =
        pandas
        polars>=0.14.17
        numpy>=1.20
        pyarrow
        scipy
        numpy>=1.20
        faker
        lingua-language-detector
        scikit-learn
        jsonschema
        importlib-metadata;python_version<'3.10'
        importlib-resources;python_version<'3.9'
        wget
        regexmodel>=0.2.1

    [testenv:ruff]
    description = Lint with Ruff
    deps =
        ruff
    commands =
        ruff metasyn

    [testenv:pylint]
    description = Lint with PyLint
    deps =
        pylint
    commands =
        pylint metasyn

    [testenv:pydocstyle]
    description = Check docstrings with pydocstyle
    deps =
        pydocstyle
    commands =
        pydocstyle metasyn --convention=numpy --add-select=D417 --add-ignore="D102,D105"

    [testenv:mypy]
    description = Check types with MyPy
    deps =
        mypy
        types-tqdm
        types-regex
    commands =
        mypy metasyn

    [testenv:sphinx]
    description = Check if documentation builds.
    allowlist_externals =
        make
    deps =
        sphinx
        sphinx-rtd-theme
        sphinxcontrib-napoleon
        sphinx-autodoc-typehints
        sphinx_inline_tabs
        sphinx_copybutton
    changedir = docs
    commands =
        make html SPHINXOPTS="-W --keep-going"

    [testenv:pytest]
    description = Test with pytest
    deps =
        pytest
        XlsxWriter
    commands =
        pytest tests

    [testenv:nbval]
    description = Check notebook output
    deps =
        pytest
        nbval
        XlsxWriter
    commands =
        pytest --nbval-lax examples
"""